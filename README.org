* hurl-mode
An Emacs major mode for [[https://hurl.dev/][hurl]], a cli tool for sending HTTP requests (using cURL under the hood) in plain text format similar to [[https://github.com/pashky/restclient.el][restclient.el]],
but can be used outside emacs and also has some additional testing utilities built in.

* Usage
A simple wrapper for the cli command is provided via: ~hurl-mode-send-request~ with a shortcut of =C-c C-c=

With one prefix arg, will run the hurl file with =--test=

If a hurl variable file, =hurl-variable-file= (default is =.hurl-variables=) exists in the same directory as the .hurl file we're executing, the variables will automatically be added to the request.

The hurl response buffer, if run with =--very-verbose= (via 2 prefix args) has some basic folding via some simple outline mode heading regexes.

** org babel integration
Simple org babel implementation that passes the src block vars into the --variable option for the cli command

Simple example:
#+begin_example
,#+begin_src hurl :results output :var host="https://httpbin.org/post"
POST {{host}}
,#+end_src
#+end_example

** Commands to send request
- =C-c x= will execute the hurl request at point in a temporary file created using the same directory as the original.
- =C-c X= will execute the entire hurl file.
- =C-c T= will execute the hurl file in test mode.

If =jq= is available, then it will automatically be used to format what json exists in the response.

There's a separate mode for the hurl response buffer. If you execute any of the commands with:
- one or more prefix args, =--very-verbose= option will be added.
- With two or more, prompt for additional cli args.
- With three or more, edit the =jq= command that will be used to filter/format the output.

Outline-minor-mode is automatically enabled with some custom outline methods. This makes it easy to navigate and see all the responses from the very-verbose output.

** screenshot
[[file:screenshot.png]]

* Installation
With emacs 29 we have built in package-vc-install and use-package now
#+begin_src elisp
  (package-vc-install "https://github.com/JasZhe/hurl-mode")
  (use-package hurl-mode :mode "\\.hurl\\'")
#+end_src

With straight:
#+begin_src elisp
  (straight-use-package
   '(hurl-mode :type git :host github :repo "jaszhe/hurl-mode"))
#+end_src

With doom:
#+begin_src elisp
(package! hurl-mode :recipe (:host github :repo "jaszhe/hurl-mode" :files ("*.el")))
#+end_src

Add to auto mode alist
#+begin_src elisp
(add-to-list 'auto-mode-alist '("\\.hurl\\'" . hurl-mode))
#+end_src

* Motivation
Hurl does have an existing mode included [[https://github.com/Orange-OpenSource/hurl/tree/master/contrib/emacs][here]] but it was lacking some QOL features that I wanted like body highlighting depending on what language the body was in i.e. json/graphql

I created this repo so that it would be easier for me to incorporate requested changes from the emacs community.

Prior to this I was using the excellent [[https://github.com/pashky/restclient.el][restclient.el]] but I liked hurl because it's a little more portable than sharing curl scripts to non-emacs users (albeit they need to have hurl installed)

Lastly, I also used this as an exercise to learn more about emacs lisp and how major modes are structured and as a way to give back to this wonderful editor known as emacs.

* Contributing
My use case for hurl is actually pretty simple.
I just use it to send some basic requests with some auth capturing mixed in.
I don't really make too much use of the test/assertion facilities.
So if you do have some more complicated use cases that aren't covered here, feel free to drop an issue.

I mostly wrote this for two reasons, one to have some basic font locking and stuff for hurl
(and also org babel integration where I find it most useful actually) and to learn a bit more elisp.

I won't stop people from making PR's but given the above, I would actually like to tackle any issues myself first :)
if you would bear with my inexperience. Pointers and advice in the issues would also be appreciated for the same reason.


* Acknowledgements
Took a lot of inspiration for the extend region function from [[https://github.com/nex3/haml-mode][haml-mode]] (no longer using extend region, instead sort of using the same hackyish method that org babel uses)

Also found this example very useful for [[https://stackoverflow.com/questions/9452615/emacs-is-there-a-clear-example-of-multi-line-font-locking][multi line font locking]]

Another good resource [[https://www.omarpolo.com/post/writing-a-major-mode.html][here]]

The code in org for fontifying src blocks was also very useful, more info in the code. Also found [[https://fuco1.github.io/2017-06-01-The-absolute-awesomeness-of-anchored-font-lock-matchers.html][this]]
pretty useful for demystifying how the anchored [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Search_002dbased-Fontification.html][search-based fontification]] worked.
